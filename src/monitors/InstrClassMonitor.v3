// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def X_ = MonitorRegistry.add(
	"iclass", "Traces instruction classes during execution.",
	InstrClassMonitor.new());

/** Similar to the OpcodeMonitor, but for instruction classes. */
class InstrClassMonitor extends Monitor {
	def entries = Vector<InstrClassEntry>.new();
	def it = BytecodeIterator.new();

	def onParse(m: Module) {
		for (i = 0; i < 9; i++) {
			entries.set(i, InstrClassEntry(indexToInstrClass(i), 0, CountProbe.new()));
		}
		ModuleInstrumenter.new(m).forEachFunc(instrument);
	}

	def onFinish(i: Instance, r: Result) {
		var entries = entries.copy();
		entries = Arrays.sort(entries, 0, entries.length, compare);
		output(entries);
	}

	private def instrument(mm: ModuleInstrumenter, func: FuncDecl) {
		for (bi = it.reset(func); bi.more(); bi.next()) {
			var op = bi.current();
			var probe: CountProbe;
			var iclass = classify(op);
			var index = instrClassToIndex(iclass);

			var e = entries[index];
			probe = if(e.count != null, e.count, CountProbe.new());
			entries[index] = InstrClassEntry(iclass, e.static_count + 1u, probe);

			Instrumentation.insertLocalProbe(mm.module, func.func_index, bi.pc, probe);
		}
	}
}


/***** Output Code *****/
def table = initTable();
def initTable() -> TraceTable {
	var t = TraceTable.new(["InstrClass", "static", "dynamic"]);
	t.cells[0].set(24, Justification.LEFT, Color.NONE);
	t.cells[1].set(7, Justification.RIGHT, Color.NONE);
	t.cells[2].set(12, Justification.RIGHT, Color.NONE);
	return t;
}

// List of instruction classes
enum InstrClass(ch: byte, color: string) {
	NOP		(' ', Color.NONE.defstr),
	CONTROL		('c', TermColors.YELLOW),
	DATA		('d', TermColors.GRAY5),
	CALL		('k', TermColors.PURPLE),
	MEMORY		('m', TermColors.RED),
	INT_ARITH	('i', TermColors.GREEN),
	FLOAT_ARITH	('f', TermColors.BLUE),
	SIMD_ARITH	('s', TermColors.CYAN),
	REF		('r', TermColors.MAGENTA)
}
def instrClassToIndex(c: InstrClass) -> int {
	match (c) {
		NOP => return 0;
		CONTROL => return 1;
		DATA => return 2;
		CALL => return 3;
		MEMORY => return 4;
		INT_ARITH => return 5;
		FLOAT_ARITH => return 6;
		SIMD_ARITH => return 7;
		REF => return 8;
	}
}
def indexToInstrClass(i: int) -> InstrClass {
	match (i) {
		0 => return InstrClass.NOP;
		1 => return InstrClass.CONTROL;
		2 => return InstrClass.DATA;
		3 => return InstrClass.CALL;
		4 => return InstrClass.MEMORY;
		5 => return InstrClass.INT_ARITH;
		6 => return InstrClass.FLOAT_ARITH;
		7 => return InstrClass.SIMD_ARITH;
		8 => return InstrClass.REF;
	}

	return InstrClass.NOP;
}
type InstrClassEntry(op: InstrClass, static_count: u32, count: CountProbe);

def compare(a: InstrClassEntry, b: InstrClassEntry) -> bool {
	if (a.count == null) return false;
	if (b.count == null) return true;
	return a.count.count > b.count.count;
}

// Output the final list of instruction classes after execution has completed.
// Ensure array is sorted in decreasing order of dynamic count.
def output(array: Array<InstrClassEntry>) {
	var C = table.cells;
	C[1].color = Color.COUNT;
	C[2].color = Color.COUNT;
	if (MonitorOptions.CSV.val) table.putCsvHeader(Trace.OUT);
	else table.putTableHeader(Trace.OUT);
	Trace.OUT.flush();
	for (e in array) {
		if (e.count == null) continue;
		var nl = e.op.name.length;
		C[0].color = if(e.count.count > 0, Color.COVERED, Color.UNREACHABLE);
		C[0].puts(e.op.name);
		C[1].putd(e.static_count);
		C[2].putd(e.count.count);
		if (MonitorOptions.CSV.val) table.putCsvRow(Trace.OUT);
		else table.putTableRow(Trace.OUT);
		Trace.OUT.flush();
	}
}
/***********************/

// Helper method to map opcode to instruction class
def classify(op: Opcode) -> InstrClass {
	match (op) {
		INVALID,
		CRASH_EXEC,
		CRASH_COMPILER,
		NOP,
		BLOCK,
		LOOP,
		END,
		TRY,
		CATCH,
		CATCH_ALL,
		TRY_TABLE
			=> return InstrClass.NOP;

		UNREACHABLE,
		IF,
		ELSE,
		THROW,
		RETHROW,
		THROW_REF,
		BR,
		BR_IF,
		BR_TABLE,
		DELEGATE,
		BR_ON_NULL,
		BR_ON_NON_NULL,
		BR_ON_CAST,
		BR_ON_CAST_FAIL,
		SUSPEND,
		RESUME,
		RESUME_THROW
			=> return InstrClass.CONTROL;

		DROP,
		SELECT,
		SELECT_T,
		LOCAL_GET,
		LOCAL_SET,
		LOCAL_TEE,
		I32_CONST,
		I64_CONST,
		F32_CONST,
		F64_CONST,
		V128_CONST
			=> return InstrClass.DATA;

		RETURN,
		CALL,
		CALL_INDIRECT,
		RETURN_CALL,
		RETURN_CALL_INDIRECT,
		CALL_REF,
		RETURN_CALL_REF
			=> return InstrClass.CALL;

		GLOBAL_GET,
		GLOBAL_SET,
		I32_LOAD,
		I64_LOAD,
		F32_LOAD,
		F64_LOAD,
		I32_LOAD8_S,
		I32_LOAD8_U,
		I32_LOAD16_S,
		I32_LOAD16_U,
		I64_LOAD8_S,
		I64_LOAD8_U,
		I64_LOAD16_S,
		I64_LOAD16_U,
		I64_LOAD32_S,
		I64_LOAD32_U,
		I32_STORE,
		I64_STORE,
		F32_STORE,
		F64_STORE,
		I32_STORE8,
		I32_STORE16,
		I64_STORE8,
		I64_STORE16,
		I64_STORE32,
		MEMORY_SIZE,
		MEMORY_GROW,
		MEMORY_INIT,
		DATA_DROP,
		MEMORY_COPY,
		MEMORY_FILL,
		V128_LOAD,
		V128_LOAD_8X8_S,
		V128_LOAD_8X8_U,
		V128_LOAD_16X4_S,
		V128_LOAD_16X4_U,
		V128_LOAD_32X2_S,
		V128_LOAD_32X2_U,
		V128_LOAD_8_SPLAT,
		V128_LOAD_16_SPLAT,
		V128_LOAD_32_SPLAT,
		V128_LOAD_64_SPLAT,
		V128_LOAD_32_ZERO,
		V128_LOAD_64_ZERO,
		V128_STORE,
		V128_LOAD_8_LANE,
		V128_LOAD_16_LANE,
		V128_LOAD_32_LANE,
		V128_LOAD_64_LANE,
		V128_STORE_8_LANE,
		V128_STORE_16_LANE,
		V128_STORE_32_LANE,
		V128_STORE_64_LANE,
		MEMORY_ATOMIC_NOTIFY,
		MEMORY_ATOMIC_WAIT32,
		MEMORY_ATOMIC_WAIT64,
		ATOMIC_FENCE,
		I32_ATOMIC_LOAD,
		I64_ATOMIC_LOAD,
		I32_ATOMIC_LOAD8_U,
		I32_ATOMIC_LOAD16_U,
		I64_ATOMIC_LOAD8_U,
		I64_ATOMIC_LOAD16_U,
		I64_ATOMIC_LOAD32_U,
		I32_ATOMIC_STORE,
		I64_ATOMIC_STORE,
		I32_ATOMIC_STORE8,
		I32_ATOMIC_STORE16,
		I64_ATOMIC_STORE8,
		I64_ATOMIC_STORE16,
		I64_ATOMIC_STORE32,
		I32_ATOMIC_RMW_ADD,
		I64_ATOMIC_RMW_ADD,
		I32_ATOMIC_RMW8_ADD_U,
		I32_ATOMIC_RMW16_ADD_U,
		I64_ATOMIC_RMW8_ADD_U,
		I64_ATOMIC_RMW16_ADD_U,
		I64_ATOMIC_RMW32_ADD_U,
		I32_ATOMIC_RMW_SUB,
		I64_ATOMIC_RMW_SUB,
		I32_ATOMIC_RMW8_SUB_U,
		I32_ATOMIC_RMW16_SUB_U,
		I64_ATOMIC_RMW8_SUB_U,
		I64_ATOMIC_RMW16_SUB_U,
		I64_ATOMIC_RMW32_SUB_U,
		I32_ATOMIC_RMW_AND,
		I64_ATOMIC_RMW_AND,
		I32_ATOMIC_RMW8_AND_U,
		I32_ATOMIC_RMW16_AND_U,
		I64_ATOMIC_RMW8_AND_U,
		I64_ATOMIC_RMW16_AND_U,
		I64_ATOMIC_RMW32_AND_U,
		I32_ATOMIC_RMW_OR,
		I64_ATOMIC_RMW_OR,
		I32_ATOMIC_RMW8_OR_U,
		I32_ATOMIC_RMW16_OR_U,
		I64_ATOMIC_RMW8_OR_U,
		I64_ATOMIC_RMW16_OR_U,
		I64_ATOMIC_RMW32_OR_U,
		I32_ATOMIC_RMW_XOR,
		I64_ATOMIC_RMW_XOR,
		I32_ATOMIC_RMW8_XOR_U,
		I32_ATOMIC_RMW16_XOR_U,
		I64_ATOMIC_RMW8_XOR_U,
		I64_ATOMIC_RMW16_XOR_U,
		I64_ATOMIC_RMW32_XOR_U,
		I32_ATOMIC_RMW_XCHG,
		I64_ATOMIC_RMW_XCHG,
		I32_ATOMIC_RMW8_XCHG_U,
		I32_ATOMIC_RMW16_XCHG_U,
		I64_ATOMIC_RMW8_XCHG_U,
		I64_ATOMIC_RMW16_XCHG_U,
		I64_ATOMIC_RMW32_XCHG_U,
		I32_ATOMIC_RMW_CMPXCHG,
		I64_ATOMIC_RMW_CMPXCHG,
		I32_ATOMIC_RMW8_CMPXCHG_U,
		I32_ATOMIC_RMW16_CMPXCHG_U,
		I64_ATOMIC_RMW8_CMPXCHG_U,
		I64_ATOMIC_RMW16_CMPXCHG_U,
		I64_ATOMIC_RMW32_CMPXCHG_U
			=> return InstrClass.MEMORY;

		I32_EQZ,
		I32_EQ,
		I32_NE,
		I32_LT_S,
		I32_LT_U,
		I32_GT_S,
		I32_GT_U,
		I32_LE_S,
		I32_LE_U,
		I32_GE_S,
		I32_GE_U,
		I64_EQZ,
		I64_EQ,
		I64_NE,
		I64_LT_S,
		I64_LT_U,
		I64_GT_S,
		I64_GT_U,
		I64_LE_S,
		I64_LE_U,
		I64_GE_S,
		I64_GE_U,
		I32_CLZ,
		I32_CTZ,
		I32_POPCNT,
		I32_ADD,
		I32_SUB,
		I32_MUL,
		I32_DIV_S,
		I32_DIV_U,
		I32_REM_S,
		I32_REM_U,
		I32_AND,
		I32_OR,
		I32_XOR,
		I32_SHL,
		I32_SHR_S,
		I32_SHR_U,
		I32_ROTL,
		I32_ROTR,
		I64_CLZ,
		I64_CTZ,
		I64_POPCNT,
		I64_ADD,
		I64_SUB,
		I64_MUL,
		I64_DIV_S,
		I64_DIV_U,
		I64_REM_S,
		I64_REM_U,
		I64_AND,
		I64_OR,
		I64_XOR,
		I64_SHL,
		I64_SHR_S,
		I64_SHR_U,
		I64_ROTL,
		I64_ROTR,
		I32_WRAP_I64,
		I32_TRUNC_F32_S,
		I32_TRUNC_F32_U,
		I32_TRUNC_F64_S,
		I32_TRUNC_F64_U,
		I64_EXTEND_I32_S,
		I64_EXTEND_I32_U,
		I64_TRUNC_F32_S,
		I64_TRUNC_F32_U,
		I64_TRUNC_F64_S,
		I64_TRUNC_F64_U,
		I32_EXTEND8_S,
		I32_EXTEND16_S,
		I64_EXTEND8_S,
		I64_EXTEND16_S,
		I64_EXTEND32_S
			=> return InstrClass.INT_ARITH;

		F32_EQ,
		F32_NE,
		F32_LT,
		F32_GT,
		F32_LE,
		F32_GE,
		F64_EQ,
		F64_NE,
		F64_LT,
		F64_GT,
		F64_LE,
		F64_GE,
		F32_ABS,
		F32_NEG,
		F32_CEIL,
		F32_FLOOR,
		F32_TRUNC,
		F32_NEAREST,
		F32_SQRT,
		F32_ADD,
		F32_SUB,
		F32_MUL,
		F32_DIV,
		F32_MIN,
		F32_MAX,
		F32_COPYSIGN,
		F64_ABS,
		F64_NEG,
		F64_CEIL,
		F64_FLOOR,
		F64_TRUNC,
		F64_NEAREST,
		F64_SQRT,
		F64_ADD,
		F64_SUB,
		F64_MUL,
		F64_DIV,
		F64_MIN,
		F64_MAX,
		F64_COPYSIGN,
		F32_CONVERT_I32_S,
		F32_CONVERT_I32_U,
		F32_CONVERT_I64_S,
		F32_CONVERT_I64_U,
		F32_DEMOTE_F64,
		F64_CONVERT_I32_S,
		F64_CONVERT_I32_U,
		F64_CONVERT_I64_S,
		F64_CONVERT_I64_U,
		F64_PROMOTE_F32,
		I32_REINTERPRET_F32,
		I64_REINTERPRET_F64,
		F32_REINTERPRET_I32,
		F64_REINTERPRET_I64,
		I32_TRUNC_SAT_F32_S,
		I32_TRUNC_SAT_F32_U,
		I32_TRUNC_SAT_F64_S,
		I32_TRUNC_SAT_F64_U,
		I64_TRUNC_SAT_F32_S,
		I64_TRUNC_SAT_F32_U,
		I64_TRUNC_SAT_F64_S,
		I64_TRUNC_SAT_F64_U
			=> return InstrClass.FLOAT_ARITH;

		I8X16_SHUFFLE,
		I8X16_EXTRACTLANE_S,
		I8X16_EXTRACTLANE_U,
		I8X16_REPLACELANE,
		I16X8_EXTRACTLANE_S,
		I16X8_EXTRACTLANE_U,
		I16X8_REPLACELANE,
		I32X4_EXTRACTLANE,
		I32X4_REPLACELANE,
		I64X2_EXTRACTLANE,
		I64X2_REPLACELANE,
		F32X4_EXTRACTLANE,
		F32X4_REPLACELANE,
		F64X2_EXTRACTLANE,
		F64X2_REPLACELANE,
		I8X16_SWIZZLE,
		I8X16_SPLAT,
		I16X8_SPLAT,
		I32X4_SPLAT,
		I64X2_SPLAT,
		F32X4_SPLAT,
		F64X2_SPLAT,
		I8X16_EQ,
		I8X16_NE,
		I8X16_LT_S,
		I8X16_LT_U,
		I8X16_GT_S,
		I8X16_GT_U,
		I8X16_LE_S,
		I8X16_LE_U,
		I8X16_GE_S,
		I8X16_GE_U,
		I16X8_EQ,
		I16X8_NE,
		I16X8_LT_S,
		I16X8_LT_U,
		I16X8_GT_S,
		I16X8_GT_U,
		I16X8_LE_S,
		I16X8_LE_U,
		I16X8_GE_S,
		I16X8_GE_U,
		I32X4_EQ,
		I32X4_NE,
		I32X4_LT_S,
		I32X4_LT_U,
		I32X4_GT_S,
		I32X4_GT_U,
		I32X4_LE_S,
		I32X4_LE_U,
		I32X4_GE_S,
		I32X4_GE_U,
		I64X2_EQ,
		I64X2_NE,
		I64X2_LT_S,
		I64X2_GT_S,
		I64X2_LE_S,
		I64X2_GE_S,
		F32X4_EQ,
		F32X4_NE,
		F32X4_LT,
		F32X4_GT,
		F32X4_LE,
		F32X4_GE,
		F64X2_EQ,
		F64X2_NE,
		F64X2_LT,
		F64X2_GT,
		F64X2_LE,
		F64X2_GE,
		V128_NOT,
		V128_AND,
		V128_ANDNOT,
		V128_OR,
		V128_XOR,
		V128_BITSELECT,
		V128_ANYTRUE,
		I8X16_ABS,
		I8X16_NEG,
		I8X16_POPCNT,
		I8X16_ALLTRUE,
		I8X16_BITMASK,
		I8X16_NARROW_I16X8_S,
		I8X16_NARROW_I16X8_U,
		I8X16_SHL,
		I8X16_SHR_S,
		I8X16_SHR_U,
		I8X16_ADD,
		I8X16_ADD_SAT_S,
		I8X16_ADD_SAT_U,
		I8X16_SUB,
		I8X16_SUB_SAT_S,
		I8X16_SUB_SAT_U,
		I8X16_MIN_S,
		I8X16_MIN_U,
		I8X16_MAX_S,
		I8X16_MAX_U,
		I8X16_AVGR_U,
		I16X8_EXTADDPAIRWISE_I8X16_S,
		I16X8_EXTADDPAIRWISE_I8X16_U,
		I16X8_ABS,
		I16X8_NEG,
		I16X8_Q15MULRSAT_S,
		I16X8_ALLTRUE,
		I16X8_BITMASK,
		I16X8_NARROW_I32X4_S,
		I16X8_NARROW_I32X4_U,
		I16X8_EXTEND_LOW_I8X16_S,
		I16X8_EXTEND_HIGH_I8X16_S,
		I16X8_EXTEND_LOW_I8X16_U,
		I16X8_EXTEND_HIGH_I8X16_U,
		I16X8_SHL,
		I16X8_SHR_S,
		I16X8_SHR_U,
		I16X8_ADD,
		I16X8_ADD_SAT_S,
		I16X8_ADD_SAT_U,
		I16X8_SUB,
		I16X8_SUB_SAT_S,
		I16X8_SUB_SAT_U,
		I16X8_MUL,
		I16X8_MIN_S,
		I16X8_MIN_U,
		I16X8_MAX_S,
		I16X8_MAX_U,
		I16X8_AVGR_U,
		I16X8_EXTMUL_LOW_I8X16_S,
		I16X8_EXTMUL_HIGH_I8X16_S,
		I16X8_EXTMUL_LOW_I8X16_U,
		I16X8_EXTMUL_HIGH_I8X16_U,
		I32X4_EXTADDPAIRWISE_I16X8_S,
		I32X4_EXTADDPAIRWISE_I16X8_U,
		I32X4_ABS,
		I32X4_NEG,
		I32X4_ALLTRUE,
		I32X4_BITMASK,
		I32X4_EXTEND_LOW_I16X8_S,
		I32X4_EXTEND_HIGH_I16X8_S,
		I32X4_EXTEND_LOW_I16X8_U,
		I32X4_EXTEND_HIGH_I16X8_U,
		I32X4_SHL,
		I32X4_SHR_S,
		I32X4_SHR_U,
		I32X4_ADD,
		I32X4_SUB,
		I32X4_MUL,
		I32X4_MIN_S,
		I32X4_MIN_U,
		I32X4_MAX_S,
		I32X4_MAX_U,
		I32X4_DOT_I16X8_S,
		I32X4_EXTMUL_LOW_I16X8_S,
		I32X4_EXTMUL_HIGH_I16X8_S,
		I32X4_EXTMUL_LOW_I16X8_U,
		I32X4_EXTMUL_HIGH_I16X8_U,
		I64X2_ABS,
		I64X2_NEG,
		I64X2_ALLTRUE,
		I64X2_BITMASK,
		I64X2_EXTEND_LOW_I32X4_S,
		I64X2_EXTEND_HIGH_I32X4_S,
		I64X2_EXTEND_LOW_I32X4_U,
		I64X2_EXTEND_HIGH_I32X4_U,
		I64X2_SHL,
		I64X2_SHR_S,
		I64X2_SHR_U,
		I64X2_ADD,
		I64X2_SUB,
		I64X2_MUL,
		I64X2_EXTMUL_LOW_I32X4_S,
		I64X2_EXTMUL_HIGH_I32X4_S,
		I64X2_EXTMUL_LOW_I32X4_U,
		I64X2_EXTMUL_HIGH_I32X4_U,
		F32X4_CEIL,
		F32X4_FLOOR,
		F32X4_TRUNC,
		F32X4_NEAREST,
		F32X4_ABS,
		F32X4_NEG,
		F32X4_SQRT,
		F32X4_ADD,
		F32X4_SUB,
		F32X4_MUL,
		F32X4_DIV,
		F32X4_MIN,
		F32X4_MAX,
		F32X4_PMIN,
		F32X4_PMAX,
		F64X2_CEIL,
		F64X2_FLOOR,
		F64X2_TRUNC,
		F64X2_NEAREST,
		F64X2_ABS,
		F64X2_NEG,
		F64X2_SQRT,
		F64X2_ADD,
		F64X2_SUB,
		F64X2_MUL,
		F64X2_DIV,
		F64X2_MIN,
		F64X2_MAX,
		F64X2_PMIN,
		F64X2_PMAX,
		I32X4_TRUNC_SAT_F32X4_S,
		I32X4_TRUNC_SAT_F32X4_U,
		F32X4_CONVERT_I32X4_S,
		F32X4_CONVERT_I32X4_U,
		I32X4_TRUNC_SAT_F64X2_S_ZERO,
		I32X4_TRUNC_SAT_F64X2_U_ZERO,
		F64X2_CONVERT_LOW_I32X4_S,
		F64X2_CONVERT_LOW_I32X4_U,
		F32X4_DEMOTE_F64X2_ZERO,
		F64X2_PROMOTE_LOW_F32X4
			=> return InstrClass.SIMD_ARITH;

		TABLE_GET,
		TABLE_SET,
		REF_NULL,
		REF_IS_NULL,
		REF_FUNC,
		REF_EQ,
		REF_AS_NON_NULL,
		STRUCT_NEW,
		STRUCT_NEW_DEFAULT,
		STRUCT_GET,
		STRUCT_GET_S,
		STRUCT_GET_U,
		STRUCT_SET,
		ARRAY_NEW,
		ARRAY_NEW_DEFAULT,
		ARRAY_NEW_FIXED,
		ARRAY_NEW_DATA,
		ARRAY_NEW_ELEM,
		ARRAY_GET,
		ARRAY_GET_S,
		ARRAY_GET_U,
		ARRAY_SET,
		ARRAY_LEN,
		ARRAY_FILL,
		ARRAY_COPY,
		ARRAY_INIT_DATA,
		ARRAY_INIT_ELEM,
		REF_TEST,
		REF_TEST_NULL,
		REF_CAST,
		REF_CAST_NULL,
		ANY_CONVERT_EXTERN,
		EXTERN_CONVERT_ANY,
		REF_I31,
		I31_GET_S,
		I31_GET_U,
		TABLE_INIT,
		ELEM_DROP,
		TABLE_COPY,
		TABLE_GROW,
		TABLE_SIZE,
		TABLE_FILL,
		CONT_NEW,
		CONT_BIND
			=> return InstrClass.REF;
	}
}
